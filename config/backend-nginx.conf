# vim: set syntax=nginx:

server {
  listen 80;

  server_name open.backend.test;

  location / {
    return 200 'Open bobnet test\n';
    add_header Content-Type text/plain;
  }
}

server {
  listen 443 ssl;

  server_name secure.backend.test;

  ssl_certificate /etc/nginx/ssl/certs/backend-server.crt;
  ssl_certificate_key /etc/nginx/ssl/private/backend-server.key;
  ssl_session_timeout 10m;
  ssl_protocols TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_prefer_server_ciphers on;

  location / {
    return 200 'Secure backend test\n';
  }
}

server {
  listen 443 ssl;

  server_name client.backend.test;

  ssl_client_certificate /etc/nginx/ssl/certs/test-ca.pem;
  ssl_verify_client on;

  ssl_certificate /etc/nginx/ssl/certs/backend-server.crt;
  ssl_certificate_key /etc/nginx/ssl/private/backend-server.key;
  ssl_session_timeout 10m;
  ssl_protocols TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
  ssl_prefer_server_ciphers on;

  location / {
    return 200 'Client auth backend test\n';
    add_header Content-Type text/plain;
  }
}
